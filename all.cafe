mod! NAT-ERR { pr(NAT)
[Nat ErrNat < Nat&Err]
op errNat : -> ErrNat {constr} .
op p_ : Zero -> ErrNat .
op p_ : ErrNat -> ErrNat .
op p_ : Nat&Err -> Nat&Err .
op _quo_ : Nat&Err Zero -> ErrNat .
op _quo_ : Nat&Err ErrNat -> ErrNat .
op _quo_ : ErrNat Nat&Err -> ErrNat .
op _quo_ : Nat&Err Nat&Err -> Nat&Err .
var NE : Nat&Err .
eq p 0 = errNat .
eq p errNat = errNat .
eq NE quo 0 = errNat .
eq NE quo errNat = errNat .
eq errNat quo NE = errNat .
}
mod! NATLIST { pr(NAT-ERR)
op _|_ : Nat NatList -> NatList .
op tl : NatList -> NatList .
op _@_ : NatList NatList -> NatList .
op [_.._] : Nat Nat -> NatList .
op if_then {_} else {_} : Bool NatList NatList -> NatList .
op hd : Nil -> ErrNat .
op hd : NnNatList -> Nat .
op hd : NatList -> Nat&Err .
eq hd(nil) = errNat .
eq hd(X | L) = X .
eq tl(nil) = nil .
eq tl(X | L) = L .
eq nil @ L2 = L2 .
eq (X | L) @ L2 = X | (L @ L2) .
eq [X .. Y] = if X > Y then {nil} else {X | [X + 1 .. Y]} .
eq if true then {L} else {L2} = L .
eq if false then {L} else {L2} = L2 .
}
open NATLIST .
red [2 .. 10] .
close-- 1st: declare a prameterized module
mod! LIST1(E :: TRIV) {
	[List]
	op nil : -> List {constr} .
	op _|_ : Elt.E List -> List {constr} .
	
	vars E E2 : Elt.E .
	vars L1 L2 L3 : List .

	-- try operation from built-in module, namely EQL
	eq (nil = E | L1) = false .
	eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .

	-- concatination
	op _@_ : List List -> List .
	eq nil @ L2 = L2 .
	eq (E | L1) @ L2 = E | (L1 @ L2) .
	
	-- rev1
	op rev1 : List -> List .
	eq rev1(nil) = nil .
	eq rev1(E | L1) = rev1(L1) @ (E | nil) .
	
	-- eq rev1(L1 @ L2) = rev1(L2) @ rev1(L1) .
	-- eq rev1(nil @ L2) = rev1(L2) .
	-- eq rev1(nil @ nil) = nil .
	-- eq rev1(L1 @ nil) = L1 .

	-- rev2
	op rev2 : List -> List .
	op sr2 : List List -> List .
	eq rev2(L1) = sr2(L1,nil) .
	eq sr2(nil,L2) = L2 .
	eq sr2(E | L1,L2) = sr2(L1,E | L2) .
}
mod! LIST2(E :: TRIV) {
	[List]
	op nil : -> List {constr} .
	op _|_ : Elt.E List -> List {constr} .
	
	vars E E2 : Elt.E .
	vars L1 L2 L3 : List .

	-- try operation from built-in module, namely EQL
	eq (nil = E | L1) = false .
	eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .

	-- concatination
	op _@_ : List List -> List {assoc} .
	eq nil @ L2 = L2 .
	eq (E | L1) @ L2 = E | (L1 @ L2) .
	
	-- rev1
	op rev1 : List -> List .
	eq rev1(nil) = nil .
	eq rev1(E | L1) = rev1(L1) @ (E | nil) .
	
	-- eq rev1(L1 @ L2) = rev1(L2) @ rev1(L1) .
	-- eq rev1(nil @ L2) = rev1(L2) .
	-- eq rev1(nil @ nil) = nil .
	-- eq rev1(L1 @ nil) = L1 .

	-- rev2
	op rev2 : List -> List .
	op sr2 : List List -> List .
	eq rev2(L1) = sr2(L1,nil) .
	eq sr2(nil,L2) = L2 .
	eq sr2(E | L1,L2) = sr2(L1,E | L2) .
}
-- 2nd: create view to make a instance of a parameterized module
view TRIV2NAT from TRIV to NAT {
	sort Elt -> Nat
}

-- 3rd: make a instance of a parameterized module by a view at 2nd step
mod! NATLIST {
	pr(LIST1 (E <= TRIV2NAT))
}

-- examples
open LIST1 .
	ops e1 e2 e3 : -> Elt.E .
	red rev1(e1 | e2 | e3 | nil) .
close

-- base case
open LIST1 .
	-- fresh constants
	ops l2 l3 : -> List .
	-- check
	red (nil @ l2) @ l3 = nil @ (l2 @ l3) .
close

-- inductive case
open LIST1 .
	-- fresh constants
	ops l1 l2 l3 : -> List .
	op e : -> Elt.E .
	-- induction hypothesis
	eq (l1 @ L2) @ L3 = l1 @ (L2 @ L3) .
	-- check
	red ((e | l1) @ l2) @ l3 = (e | l1) @ (l2 @ l3) .
close


-- proof rev1(rev1(L)) = L
-- base case
open LIST1 .
	red rev1(rev1(nil)) = nil .
close

-- induction case
open LIST1 .
	ops l l1 l2 : -> List .
	op e : -> Elt.E .
	-- induction hypothesis
	eq rev1(rev1(l)) = l .
	eq rev1(L1 @ L2) = rev1(L2) @ rev1(L1) .
	-- check
	red rev1(rev1(e | l)) = e | l .
close



-- proof rev1(L1 @ L2) = rev1(L2) @ rev1(L1)
-- base case
open LIST1 .
	red rev1(nil @ L2) = rev1(L2) .
close

-- induction case
open LIST2 .
	ops l l1 l2 : -> List .
	op e : -> Elt.E .
	-- induction hypothesis
	eq rev1(l1 @ L2) = rev1(L2) @ rev1(l1) .
	-- check
	red rev1((e | l1) @ l2) = rev1(l2) @ rev1(e | l1) .
close


"mod! PNAT1 {
[PNat]
op 0 : -> PNat {constr} .
op s : PNat -> PNat {constr} .
op _+_ : PNat PNat -> PNat .
op _*_ : PNat PNat -> PNat .
op fact1 : PNat -> PNat .
op fact2 : PNat -> PNat .
op sfact2 : PNat PNat -> PNat .
vars X Y Z : PNat .
eq (0 = s(Y)) = false .
eq (s(X) = s(Y)) = (X = Y) .
eq 0 + Y = Y . 
eq s(X) + Y = s(X + Y) . 
}"
open PNAT1 .
	:goal { eq [assoc+] : (X + Y) + Z = X + (Y + Z) . }
	:ind on (X:PNat)d
	:apply (si)
	:apply (tc)
	:apply (rd)
	:apply (tc)
	:apply (rd)
	close
	open PNAT1 .
    :goal { eq [assoc+] : (X + Y) + Z = X + (Y + Z) . }
    :desc .
  close open NAT .
op gcd : Nat Nat -> Nat .
var X : Nat . 
var NzY : NzNat .
eq gcd(X,0) = X .
eq gcd(X,NzY) = gcd(NzY,X rem NzY) .
red gcd(24,36) .
closemod! PNAT1 {
	[PNat]
	op s : PNat -> PNat {constr} .
	op 0 : -> PNat {constr} .
	op _+_ : PNat PNat -> PNat .
	op _*_ : PNat PNat -> PNat .
	vars X Y Z : PNat .
	eq (X = X) = true .
    eq (true = false) = false .
	eq (0 = s(Y)) = false .
    eq (s(X) = s(Y)) = (X = Y) .
    eq 0 + Y = Y .
	eq s(X) + Y = s(X + Y) .
	eq 0 * Y = 0 .
    eq s(X) * Y = (X * Y) + Y .
  }
    open PNAT1 .
    ops x y z : -> PNat .
    eq (x + Y) + Z = x + (Y + Z) .
    eq (X + Y) * Z = (X * Z) + (Y * Z) .
    eq (x * Y) * Z = x * (Y * Z) .
    red s(s(s(0))) + s(s(0)) .
    red (s(x) + Y) + Z = s(x) + (Y + Z) .
    red (0 + y) + z = 0 + (y + z) .
    red (0 * y) * z = 0 * (y * z) .
    red (s(x) * y) * z = s(x) * (y * z) .
    red (0 + y) * z = (0 * z) + (y * z) . 
    red (s(x) + y) * z = (s(x) * z) + (y * z) .
    close
mod! NATLIST {
	pr(NAT)
  op nil : -> Natlist .
  op _@_ : Natlist Natlist -> Natlist .
  op _|_ : Nat Natlist -> Natlist .
  op if_then {_} else {_} : Bool Nat Nat -> Nat .
  op [_.._] : Natlist Natlist -> Natlist .
  vars X Y : Nat .
}
mod! ERATOSTHENES-SIEVE {
	pr(NATLIST)
	op primesUpto : Nat -> Natlist .
	op sieve : Natlist -> Natlist .
	op check : Nat Natlist -> Natlist .
	vars X Y : Nat . 
	var NzX : NzNat .
	var L : Natlist .
	eq primesUpto(X) = sieve([2 .. Y]) .
	eq sieve(nil) = nil .
	eq sieve(X | L) = X | sieve(check(X,L)) .
	eq check(0,L) = L .
	eq check(NzX,nil) = nil .
	eq check(NzX,Y | L) = if NzX divides Y then {check(NzX,L)} else {Y | check(NzX,L)} .
}
open ERATOSTHENES-SIEVE .
	red primesUpto(10) . 
closemod! NATLIST {
  pr(NAT)
  [Natlist]
  op nil : -> Natlist .
  op _@_ : Natlist Natlist -> Natlist .
  op _|_ : Nat Natlist -> Natlist .
  op if_then {_} else {_} : Bool Nat Nat -> Nat .
  vars X Y : Nat .
  vars L L2 : Natlist .	
  eq if true then {X} else {Y} = X .
  eq if false then {X} else {Y} = Y .
  eq nil @ L2 = L2 .
  eq (X | L) @ L2 = X | (L @ L2) .
}

mod! QUICKSORT {
  pr(NATLIST) 
  op nil : -> Natlist .
  op qsort : Natlist -> Natlist .
  op partition : Nat Natlist Natlist Natlist -> Natlist .
  vars X Y : Nat .
  vars L LL RL : Natlist .
-- equations
-- qsort
  eq qsort(nil) = nil .
  eq qsort(X | nil) = X | nil .
  eq qsort(X | Y | L) = partition(X,Y | L,nil,nil) .
-- partition
 eq partition(X,nil,LL,RL) = qsort(LL) @ (X | qsort(RL)) .
 eq partition(X,Y | L,LL,RL) = if Y < X then {partition(X,L,Y | LL,RL) else {partition(X,L,LL,Y | RL)} .
}
open QUICKSORT .
  -- red qsort(2|4|3|7|8|nil|9|nil) .
close
"mod! PNAT1-RZRS+ {
pr(PNAT1)
vars X Y : PNat .
eq X + 0 = X .
eq X + s(Y) = s(X + Y) .
}"
open PNAT1 .
:goal { eq [rz+] : X + 0 = X . }
:ind on (X:PNat)
:apply (si)
:apply (rd)
:apply (rd)
open PNAT1 .
:goal { eq [rs+] : X + s(Y) = s(X + Y) . 
}
:ind on (X:PNat)
:apply (si)
:apply (tc)
:apply (rd)
:apply (tc)
:apply (rd)
close
